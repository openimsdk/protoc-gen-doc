syntax = "proto3";
package openim.sdk.common;

option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/common";

enum SessionType {
  SessionType_ = 0;

  // Single represents a single chat session type.
  Single = 1;

  // WriteGroup represents a write-diffusion group chat session type (not currently enabled, can be ignored).
  WriteGroup = 2;

  // ReadGroup represents a read-diffusion group chat session type, used for all current group chats in OpenIM.
  ReadGroup = 3;

  // Notification represents a notification session type, generated by the client when the server sends a notification.
  Notification = 4;
}

enum MsgFrom {
  MsgFrom_ = 0;

  // User represents a message type originating from a user.
  User = 100;

  // System represents a system message type, typically generated by the system.
  System = 200;
}

enum Platform {
  Platform_ = 0;
  // iOS represents the Apple iOS platform.
  iOS = 1;
  // Android represents the Android platform.
  Android = 2;
  // Windows represents the Microsoft Windows platform.
  Windows = 3;
  // macOS represents the Apple macOS platform.
  macOS = 4;
  // Web represents the web browser platform.
  Web = 5;
  // MiniWeb represents the mini-program or mini-web platform.
  MiniWeb = 6;
  // Linux represents the Linux platform.
  Linux = 7;
  // AndroidPad represents the Android tablet platform.
  AndroidPad = 8;
  // iPad represents the Apple iPad platform.
  iPad = 9;
  // Admin represents the admin panel or management platform, typically used for backend administrators.
  // This platform is specifically for administrative filling and can generally be ignored.
  Admin = 10;
  // HarmonyOS represents the Huawei HarmonyOS platform.
  HarmonyOS = 11;
}

enum AppFramework {
  AppFramework_ = 0;
  Native = 1;
  Flutter = 2;
  ReactNative = 3;
  Electron = 4;
  Unity = 5;
  UnrealEngine = 6;
  Qt = 7;
  DotNet = 8;
  DotNetMAUI = 9;
  Avalonia = 10;
  Cordova = 11;
  UniApp = 12;
}
enum MsgStatus {
  MsgStatus_ = 0;
  Sending = 1;
  SendSuccess = 2;
  SendFailed = 3;
  HasDeleted = 4;
  Filtered = 5;
}
enum ContentType {
  ContentType_ = 0;
  Text = 101;
  Picture = 102;
  Sound = 103;
  Video = 104;
  File = 105;
  AtText = 106;
  Merge = 107;
  Card = 108;
  Location = 109;
  Custom = 110;
  Typing = 113;
  Quote = 114;
  Face = 115;
  Stream = 116;
  AdvancedText = 117;
  CustomMsgNotTriggerConversation = 119;
  CustomMsgOnlineOnly = 120;

  FriendApplicationApprovedNotification = 1201;
  //  FriendApplicationRejectedNotification = 1202;
  //  FriendApplicationNotification = 1203;
  //  FriendAddedNotification = 1204;
  //  FriendDeletedNotification = 1205;
  //  FriendRemarkSetNotification = 1206;

  //  BlackAddedNotification = 1207;
  //  BlackDeletedNotification = 1208;
  //  FriendInfoUpdatedNotification = 1209;
  //  FriendsInfoUpdateNotification = 1210;
  //  ConversationChangeNotification = 1300;
  //  UserInfoUpdatedNotification = 1303;
  //  UserStatusChangeNotification = 1304;
  //  UserCommandAddNotification = 1305;
  //  UserCommandDeleteNotification = 1306;
  //  UserCommandUpdateNotification = 1307;
  GroupCreatedNotification = 1501;
  //  GroupInfoSetNotification = 1502;
  //  JoinGroupApplicationNotification = 1503;
  MemberQuitNotification = 1504;
  //  GroupApplicationAcceptedNotification = 1505;
  //  GroupApplicationRejectedNotification = 1506;
  GroupOwnerTransferredNotification = 1507;
  MemberKickedNotification = 1508;
  MemberInvitedNotification = 1509;
  MemberEnterNotification = 1510;
  GroupDismissedNotification = 1511;
  GroupMemberMutedNotification = 1512;
  GroupMemberCancelMutedNotification = 1513;
  GroupMutedNotification = 1514;
  GroupCancelMutedNotification = 1515;
  //  GroupMemberInfoSetNotification = 1516;
  //  GroupMemberSetToAdminNotification = 1517;
  //  GroupMemberSetToOrdinaryUserNotification = 1518;
  //  GroupInfoSetAnnouncementNotification = 1519;
  //  GroupInfoSetNameNotification = 1520;
  //  GroupNotificationEnd                     = 1599;

  ConversationPrivateChatNotification = 1701;
  //  ClearConversationNotification = 1703;

  BusinessNotification = 2001;

  RevokedNotification = 2101;

  //  DeleteMsgsNotification = 2102;
  //  HasReadReceipt = 2200;

  //  NotificationEnd = 5000
}

message OfflinePushInfo {
  string title = 1;
  string desc = 2;
  string ex = 3;
  string iOSPushSound = 4;
  bool iOSBadgeCount = 5;
  string signalInfo = 6;
}

enum ApprovalStatus {
  Default = 0;
  Approved = 1;
  Rejected = -1;
}

message RequestPagination {
  int32 pageNumber = 1;
  int32 showNumber = 2;
}

enum ConvRecvMsgOpt {
  ReceiveMessage = 0;
  NotReceiveMessage = 1;
  ReceiveNotNotifyMessage = 2;
}

enum ConvGroupAtType {
  AtNormal = 0;
  AtMe = 1;
  AtAll = 2;
  AtAllAtMe = 3;
}

// GlobalRecvMsgOpt represents the global message receive option.
//
// In the globalRecvMsgOpt of UserInfo, globally control whether to receive offline push notifications.
//
// In the recvMsgOpt of a ConversationInfo, in addition to controlling whether to receive offline push notifications for that session,
// it also controls whether the unread count of that session is included in the total unread count.
enum GlobalRecvMsgOpt {
  Normal = 0; // Normally receive messages
  NotReceive = 1; // Reserved field
  NotNotify = 2; // Receive messages, but no offline push. When in conversation, this conversation's unread count is not included in the total unread count
}

// LogLevel represents the log level. debug -> info -> warn -> error -> fatal.
// Default log level is LevelWarn or LevelDebug.
enum LogLevel {
  LevelFatal = 0; // only print fatal log
  LevelPanic = 1; // print panic and fatal log
  LevelError = 2; // print error, panic and fatal log
  LevelWarn = 3; // print warn, error, panic and fatal log
  LevelInfo = 4; // print info, warn, error, panic and fatal log
  LevelDebug = 5; // print all level log
  LevelDebugWithSQL = 6; // print all level log and sql log
}
